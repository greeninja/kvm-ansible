<domain type='{{ libvirt_vm_engine | default('kvm') }}'>
  <name>{{ inventory_hostname }}</name>
  <uuid>{{ inventory_hostname | to_uuid }}</uuid>
  <memory>{{ memory | int * 1024 * 1024 }}</memory>
  <vcpu>{{ vcpus }}</vcpu>
  {% if clock_offset is defined %}
  <clock offset="{{ clock_offset }}"/>
  {% else %}
  <clock sync="localtime"/>
  {% endif %}
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <os>
    <type arch='{{ libvirt_vm_arch | default('x86_64') }}'{% if machine is defined %} machine='{{ machine }}'{% endif %}>hvm</type>
    <bootmenu enable='no'/>
    <boot dev='hd'/>
    <boot dev='cdrom'/>
    <boot dev='network'/>
    <bios useserial='yes'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  {% if cpu_mode is defined %}
  <cpu mode='{{ cpu_mode }}'>
    <model fallback='allow'/>
  </cpu>
  {% endif %}
  <devices>
    <emulator>{{ libvirt_vm_emulator | default('/usr/bin/qemu-system-x86_64')}}</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' />
      <source file='{{os_path}}/{{ inventory_hostname_short }}.qcow2'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='{{os_path}}/{{ inventory_hostname_short }}-cloudinit.iso'/>
      <target dev='sda' bus='sata'/>
      <readonly/>
    </disk>
    {% if extra_disks is defined %}
    {% for disk in extra_disk_paths %}
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' />
      <source file='{{ disk }}' />
      <target dev='vd{{ 'bcdefghijklmnopqrstuvwxyz'[loop.index - 1] }}' bus='virtio'/>
    </disk>
    {% endfor %}
    {% endif %}
{% for interface in interfaces %}
{% if interface.type is defined and interface.type == 'direct' %}
    <interface type='direct' {% if interface.trust_guest_rx_filters | default(libvirt_vm_trust_guest_rx_filters) | bool %}trustGuestRxFilters='yes'{% endif %}>
      <source dev='{{ interface.source.dev }}' mode='{{ interface.source.mode | default('vepa') }}'/>
{% elif interface.type is defined and interface.type == 'bridge' %}
    <interface type='bridge'>
      <source bridge='{{ interface.source.dev }}'/>
{% elif interface.type is not defined or interface.type == 'network' %}
    <interface type='network'>
      <source network='{{ interface.network }}'/>
{% endif %}
      {% if interface.mac is defined %}
      <mac address='{{ interface.mac }}'/>
      {% endif %}
      {# if the network configuration is invalid this can still appear in the xml #}
      {# (say you enter 'bond' instead of 'bridge' in your variables) #}
      {% if interface.model is defined %}
      <model type='{{ interface.model }}'/>
      {% else %}
      <model type='virtio'/>
      {% endif %}
      {% if interface.alias is defined %}
      <alias name='ua-{{ interface.alias }}'/>
      {% endif %}
    </interface>
{% endfor %}
{% if console_log_enabled is defined %}
    <serial type='file'>
      <source path='{{ console_log_path }}'/>
    </serial>
    <serial type='pty'/>
    <console type='file'>
      <source path='{{ console_log_path }}'/>
      <target type='serial'/>
    </console>
{% else %}
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
{% endif %}
{% if enable_vnc is defined %}
    <graphics type='vnc' autoport='yes' listen='127.0.0.1'>
      <listen type='address' address='127.0.0.1'/>
    </graphics>
{% endif %}
{% if enable_spice is defined %}
    <graphics type='spice' autoport='yes'>
      <listen type='address'/>
    </graphics>
{% endif %}
    <rng model="virtio"><backend model="random">/dev/urandom</backend></rng>
  </devices>
</domain>
